[
    {
        "url": "https://api.github.com/repos/ReactiveX/RxJava/issues/comments/12341858",
        "html_url": "https://github.com/ReactiveX/RxJava/issues/8#issuecomment-12341858",
        "issue_url": "https://api.github.com/repos/ReactiveX/RxJava/issues/8",
        "id": 12341858,
        "node_id": "MDEyOklzc3VlQ29tbWVudDEyMzQxODU4",
        "user": {
            "login": "benjchristensen",
            "id": 813492,
            "node_id": "MDQ6VXNlcjgxMzQ5Mg==",
            "avatar_url": "https://avatars.githubusercontent.com/u/813492?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benjchristensen",
            "html_url": "https://github.com/benjchristensen",
            "followers_url": "https://api.github.com/users/benjchristensen/followers",
            "following_url": "https://api.github.com/users/benjchristensen/following{/other_user}",
            "gists_url": "https://api.github.com/users/benjchristensen/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benjchristensen/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benjchristensen/subscriptions",
            "organizations_url": "https://api.github.com/users/benjchristensen/orgs",
            "repos_url": "https://api.github.com/users/benjchristensen/repos",
            "events_url": "https://api.github.com/users/benjchristensen/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benjchristensen/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2013-01-16T21:43:36Z",
        "updated_at": "2013-01-16T21:43:36Z",
        "author_association": "MEMBER",
        "body": "I am fine with Func<T, Boolean>.\n\nThe performance difference for autoboxing from Boolean to boolean should be trivial for this use case and I don't find the <T, Boolean> as enough clutter to warrant a different object.\n\nBut I'm not strongly opinionated either way.\n",
        "reactions": {
            "url": "https://api.github.com/repos/ReactiveX/RxJava/issues/comments/12341858/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/ReactiveX/RxJava/issues/comments/12345366",
        "html_url": "https://github.com/ReactiveX/RxJava/issues/7#issuecomment-12345366",
        "issue_url": "https://api.github.com/repos/ReactiveX/RxJava/issues/7",
        "id": 12345366,
        "node_id": "MDEyOklzc3VlQ29tbWVudDEyMzQ1MzY2",
        "user": {
            "login": "abersnaze",
            "id": 406038,
            "node_id": "MDQ6VXNlcjQwNjAzOA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/406038?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/abersnaze",
            "html_url": "https://github.com/abersnaze",
            "followers_url": "https://api.github.com/users/abersnaze/followers",
            "following_url": "https://api.github.com/users/abersnaze/following{/other_user}",
            "gists_url": "https://api.github.com/users/abersnaze/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/abersnaze/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/abersnaze/subscriptions",
            "organizations_url": "https://api.github.com/users/abersnaze/orgs",
            "repos_url": "https://api.github.com/users/abersnaze/repos",
            "events_url": "https://api.github.com/users/abersnaze/events{/privacy}",
            "received_events_url": "https://api.github.com/users/abersnaze/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2013-01-16T22:58:52Z",
        "updated_at": "2013-01-16T22:58:52Z",
        "author_association": "CONTRIBUTOR",
        "body": "I vote not final.\nIf it were final then it would be impossible to extend Observable to add operators and still interoperate with other code that uses Observable.\n",
        "reactions": {
            "url": "https://api.github.com/repos/ReactiveX/RxJava/issues/comments/12345366/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/ReactiveX/RxJava/issues/comments/12345515",
        "html_url": "https://github.com/ReactiveX/RxJava/issues/8#issuecomment-12345515",
        "issue_url": "https://api.github.com/repos/ReactiveX/RxJava/issues/8",
        "id": 12345515,
        "node_id": "MDEyOklzc3VlQ29tbWVudDEyMzQ1NTE1",
        "user": {
            "login": "abersnaze",
            "id": 406038,
            "node_id": "MDQ6VXNlcjQwNjAzOA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/406038?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/abersnaze",
            "html_url": "https://github.com/abersnaze",
            "followers_url": "https://api.github.com/users/abersnaze/followers",
            "following_url": "https://api.github.com/users/abersnaze/following{/other_user}",
            "gists_url": "https://api.github.com/users/abersnaze/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/abersnaze/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/abersnaze/subscriptions",
            "organizations_url": "https://api.github.com/users/abersnaze/orgs",
            "repos_url": "https://api.github.com/users/abersnaze/repos",
            "events_url": "https://api.github.com/users/abersnaze/events{/privacy}",
            "received_events_url": "https://api.github.com/users/abersnaze/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2013-01-16T23:02:22Z",
        "updated_at": "2013-01-16T23:02:22Z",
        "author_association": "CONTRIBUTOR",
        "body": "If Pred<T> could extend Func<T, Boolean> but still have lower case boolean return type maybe we could add it later if we need to.\n",
        "reactions": {
            "url": "https://api.github.com/repos/ReactiveX/RxJava/issues/comments/12345515/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/ReactiveX/RxJava/issues/comments/12345992",
        "html_url": "https://github.com/ReactiveX/RxJava/issues/7#issuecomment-12345992",
        "issue_url": "https://api.github.com/repos/ReactiveX/RxJava/issues/7",
        "id": 12345992,
        "node_id": "MDEyOklzc3VlQ29tbWVudDEyMzQ1OTky",
        "user": {
            "login": "benjchristensen",
            "id": 813492,
            "node_id": "MDQ6VXNlcjgxMzQ5Mg==",
            "avatar_url": "https://avatars.githubusercontent.com/u/813492?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benjchristensen",
            "html_url": "https://github.com/benjchristensen",
            "followers_url": "https://api.github.com/users/benjchristensen/followers",
            "following_url": "https://api.github.com/users/benjchristensen/following{/other_user}",
            "gists_url": "https://api.github.com/users/benjchristensen/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benjchristensen/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benjchristensen/subscriptions",
            "organizations_url": "https://api.github.com/users/benjchristensen/orgs",
            "repos_url": "https://api.github.com/users/benjchristensen/repos",
            "events_url": "https://api.github.com/users/benjchristensen/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benjchristensen/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2013-01-16T23:13:42Z",
        "updated_at": "2013-01-16T23:13:42Z",
        "author_association": "MEMBER",
        "body": "Agreed\n",
        "reactions": {
            "url": "https://api.github.com/repos/ReactiveX/RxJava/issues/comments/12345992/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/ReactiveX/RxJava/issues/comments/12346018",
        "html_url": "https://github.com/ReactiveX/RxJava/issues/8#issuecomment-12346018",
        "issue_url": "https://api.github.com/repos/ReactiveX/RxJava/issues/8",
        "id": 12346018,
        "node_id": "MDEyOklzc3VlQ29tbWVudDEyMzQ2MDE4",
        "user": {
            "login": "benjchristensen",
            "id": 813492,
            "node_id": "MDQ6VXNlcjgxMzQ5Mg==",
            "avatar_url": "https://avatars.githubusercontent.com/u/813492?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benjchristensen",
            "html_url": "https://github.com/benjchristensen",
            "followers_url": "https://api.github.com/users/benjchristensen/followers",
            "following_url": "https://api.github.com/users/benjchristensen/following{/other_user}",
            "gists_url": "https://api.github.com/users/benjchristensen/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benjchristensen/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benjchristensen/subscriptions",
            "organizations_url": "https://api.github.com/users/benjchristensen/orgs",
            "repos_url": "https://api.github.com/users/benjchristensen/repos",
            "events_url": "https://api.github.com/users/benjchristensen/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benjchristensen/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2013-01-16T23:14:19Z",
        "updated_at": "2013-01-16T23:14:19Z",
        "author_association": "MEMBER",
        "body": "![Screen Shot 2013-01-16 at 3 12 57 PM](https://f.cloud.github.com/assets/813492/73146/53184e52-6032-11e2-972a-886ee307b5ec.png)\n",
        "reactions": {
            "url": "https://api.github.com/repos/ReactiveX/RxJava/issues/comments/12346018/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/ReactiveX/RxJava/issues/comments/12346726",
        "html_url": "https://github.com/ReactiveX/RxJava/issues/8#issuecomment-12346726",
        "issue_url": "https://api.github.com/repos/ReactiveX/RxJava/issues/8",
        "id": 12346726,
        "node_id": "MDEyOklzc3VlQ29tbWVudDEyMzQ2NzI2",
        "user": {
            "login": "abersnaze",
            "id": 406038,
            "node_id": "MDQ6VXNlcjQwNjAzOA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/406038?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/abersnaze",
            "html_url": "https://github.com/abersnaze",
            "followers_url": "https://api.github.com/users/abersnaze/followers",
            "following_url": "https://api.github.com/users/abersnaze/following{/other_user}",
            "gists_url": "https://api.github.com/users/abersnaze/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/abersnaze/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/abersnaze/subscriptions",
            "organizations_url": "https://api.github.com/users/abersnaze/orgs",
            "repos_url": "https://api.github.com/users/abersnaze/repos",
            "events_url": "https://api.github.com/users/abersnaze/events{/privacy}",
            "received_events_url": "https://api.github.com/users/abersnaze/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2013-01-16T23:32:57Z",
        "updated_at": "2013-01-16T23:32:57Z",
        "author_association": "CONTRIBUTOR",
        "body": "sad face\n",
        "reactions": {
            "url": "https://api.github.com/repos/ReactiveX/RxJava/issues/comments/12346726/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/ReactiveX/RxJava/issues/comments/12349805",
        "html_url": "https://github.com/ReactiveX/RxJava/pull/27#issuecomment-12349805",
        "issue_url": "https://api.github.com/repos/ReactiveX/RxJava/issues/27",
        "id": 12349805,
        "node_id": "MDEyOklzc3VlQ29tbWVudDEyMzQ5ODA1",
        "user": {
            "login": "jcacciatore",
            "id": 417961,
            "node_id": "MDQ6VXNlcjQxNzk2MQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/417961?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jcacciatore",
            "html_url": "https://github.com/jcacciatore",
            "followers_url": "https://api.github.com/users/jcacciatore/followers",
            "following_url": "https://api.github.com/users/jcacciatore/following{/other_user}",
            "gists_url": "https://api.github.com/users/jcacciatore/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jcacciatore/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jcacciatore/subscriptions",
            "organizations_url": "https://api.github.com/users/jcacciatore/orgs",
            "repos_url": "https://api.github.com/users/jcacciatore/repos",
            "events_url": "https://api.github.com/users/jcacciatore/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jcacciatore/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2013-01-17T01:12:09Z",
        "updated_at": "2013-01-17T01:12:09Z",
        "author_association": "CONTRIBUTOR",
        "body": "Reviewed by Ben C\n",
        "reactions": {
            "url": "https://api.github.com/repos/ReactiveX/RxJava/issues/comments/12349805/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/ReactiveX/RxJava/issues/comments/12443726",
        "html_url": "https://github.com/ReactiveX/RxJava/issues/102#issuecomment-12443726",
        "issue_url": "https://api.github.com/repos/ReactiveX/RxJava/issues/102",
        "id": 12443726,
        "node_id": "MDEyOklzc3VlQ29tbWVudDEyNDQzNzI2",
        "user": {
            "login": "daveray",
            "id": 51405,
            "node_id": "MDQ6VXNlcjUxNDA1",
            "avatar_url": "https://avatars.githubusercontent.com/u/51405?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/daveray",
            "html_url": "https://github.com/daveray",
            "followers_url": "https://api.github.com/users/daveray/followers",
            "following_url": "https://api.github.com/users/daveray/following{/other_user}",
            "gists_url": "https://api.github.com/users/daveray/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/daveray/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/daveray/subscriptions",
            "organizations_url": "https://api.github.com/users/daveray/orgs",
            "repos_url": "https://api.github.com/users/daveray/repos",
            "events_url": "https://api.github.com/users/daveray/events{/privacy}",
            "received_events_url": "https://api.github.com/users/daveray/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2013-01-18T22:22:43Z",
        "updated_at": "2013-01-18T22:22:43Z",
        "author_association": "CONTRIBUTOR",
        "body": "That's enough issues I think. :)\n",
        "reactions": {
            "url": "https://api.github.com/repos/ReactiveX/RxJava/issues/comments/12443726/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/ReactiveX/RxJava/issues/comments/12520567",
        "html_url": "https://github.com/ReactiveX/RxJava/issues/104#issuecomment-12520567",
        "issue_url": "https://api.github.com/repos/ReactiveX/RxJava/issues/104",
        "id": 12520567,
        "node_id": "MDEyOklzc3VlQ29tbWVudDEyNTIwNTY3",
        "user": {
            "login": "benjchristensen",
            "id": 813492,
            "node_id": "MDQ6VXNlcjgxMzQ5Mg==",
            "avatar_url": "https://avatars.githubusercontent.com/u/813492?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benjchristensen",
            "html_url": "https://github.com/benjchristensen",
            "followers_url": "https://api.github.com/users/benjchristensen/followers",
            "following_url": "https://api.github.com/users/benjchristensen/following{/other_user}",
            "gists_url": "https://api.github.com/users/benjchristensen/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benjchristensen/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benjchristensen/subscriptions",
            "organizations_url": "https://api.github.com/users/benjchristensen/orgs",
            "repos_url": "https://api.github.com/users/benjchristensen/repos",
            "events_url": "https://api.github.com/users/benjchristensen/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benjchristensen/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2013-01-21T22:18:44Z",
        "updated_at": "2013-01-21T22:18:44Z",
        "author_association": "MEMBER",
        "body": "Simple performance test to demonstrate performance issue:\n\n``` java\n\npackage testing;\n\nimport java.util.concurrent.atomic.AtomicInteger;\n\nimport rx.observables.Observable;\nimport rx.observables.Observer;\nimport rx.util.Func1;\n\npublic class PerformanceTest {\n\n    public static void main(String[] args) {\n        PerformanceTest test = new PerformanceTest();\n        Integer[] values = new Integer[100001];\n        for (int i = 0; i < values.length; i++) {\n            values[i] = i;\n        }\n\n        for (int i = 0; i < 100; i++) {\n            System.out.println(\"-------------------------------\");\n            //            test.runFunctionExecutionTest(values);\n            test.runCompositionTest(values);\n            test.runNonCompositionalTestWithDirectLoop(values);\n            test.runNonCompositionalTestWithArrayOfFunctions(values);\n        }\n    }\n\n    public void runCompositionTest(Integer[] values) {\n        System.out.println(\"runCompositionTest\");\n\n        final AtomicInteger onNextSum = new AtomicInteger(0);\n        final long start = System.nanoTime();\n\n        MathFunction m = new MathFunction();\n        // 50 levels of composition (same function so that's not the cost)\n        Observable.from(values)\n                .map(m).map(m).map(m).map(m).map(m).map(m).map(m).map(m).map(m).map(m)\n                .map(m).map(m).map(m).map(m).map(m).map(m).map(m).map(m).map(m).map(m)\n                .map(m).map(m).map(m).map(m).map(m).map(m).map(m).map(m).map(m).map(m)\n                .map(m).map(m).map(m).map(m).map(m).map(m).map(m).map(m).map(m).map(m)\n                .map(m).map(m).map(m).map(m).map(m).map(m).map(m).map(m).map(m).map(m)\n                .subscribe(new TestObserver(onNextSum, start));\n    }\n\n    public void runNonCompositionalTestWithDirectLoop(Integer[] values) {\n        System.out.println(\"runNonCompositionalTestWithDirectLoop\");\n\n        final AtomicInteger onNextSum = new AtomicInteger(0);\n        final long start = System.nanoTime();\n        final MathFunction m = new MathFunction();\n\n        Observable.from(values).map(new Func1<Integer, Integer>() {\n\n            @Override\n            public Integer call(Integer t1) {\n                // iterate the 50 times here in a loop rather than via composition\n                for (int i = 0; i < 50; i++) {\n                    t1 = m.call(t1);\n                }\n                return t1;\n            }\n\n        }).subscribe(new TestObserver(onNextSum, start));\n\n    }\n\n    public void runNonCompositionalTestWithArrayOfFunctions(Integer[] values) {\n        System.out.println(\"runNonCompositionalTestWithArrayOfFunctions\");\n\n        final AtomicInteger onNextSum = new AtomicInteger(0);\n        final long start = System.nanoTime();\n        final MathFunction m = new MathFunction();\n        final Func1[] functionCalls = new Func1<?, ?>[50];\n        for (int i = 0; i < 50; i++) {\n            functionCalls[i] = m;\n        }\n\n        Observable.from(values).map(new Func1<Integer, Integer>() {\n\n            @Override\n            public Integer call(Integer t1) {\n                // iterate the 50 times here in a loop rather than via composition\n                for (Func1<Integer, Integer> f : functionCalls) {\n                    t1 = f.call(t1);\n                }\n                return t1;\n            }\n\n        }).subscribe(new TestObserver(onNextSum, start));\n\n    }\n\n    private static final class TestObserver implements Observer<Integer> {\n        private final AtomicInteger onNextSum;\n        private final long start;\n\n        private TestObserver(AtomicInteger onNextSum, long start) {\n            this.onNextSum = onNextSum;\n            this.start = start;\n        }\n\n        @Override\n        public void onNext(Integer i) {\n            onNextSum.addAndGet(i);\n        }\n\n        @Override\n        public void onError(Exception e) {\n            e.printStackTrace();\n        }\n\n        @Override\n        public void onCompleted() {\n            long end = System.nanoTime();\n            System.out.println(\"Sum: \" + onNextSum.get() + \" Time: \" + ((double) (end - start)) / 1000 / 1000 + \"ms\");\n        }\n    }\n\n    private static class MathFunction implements Func1<Integer, Integer> {\n\n        @Override\n        public Integer call(Integer t1) {\n            return t1 + 1;\n        }\n\n    }\n\n}\n\n```\n",
        "reactions": {
            "url": "https://api.github.com/repos/ReactiveX/RxJava/issues/comments/12520567/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/ReactiveX/RxJava/issues/comments/12520622",
        "html_url": "https://github.com/ReactiveX/RxJava/issues/104#issuecomment-12520622",
        "issue_url": "https://api.github.com/repos/ReactiveX/RxJava/issues/104",
        "id": 12520622,
        "node_id": "MDEyOklzc3VlQ29tbWVudDEyNTIwNjIy",
        "user": {
            "login": "benjchristensen",
            "id": 813492,
            "node_id": "MDQ6VXNlcjgxMzQ5Mg==",
            "avatar_url": "https://avatars.githubusercontent.com/u/813492?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benjchristensen",
            "html_url": "https://github.com/benjchristensen",
            "followers_url": "https://api.github.com/users/benjchristensen/followers",
            "following_url": "https://api.github.com/users/benjchristensen/following{/other_user}",
            "gists_url": "https://api.github.com/users/benjchristensen/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benjchristensen/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benjchristensen/subscriptions",
            "organizations_url": "https://api.github.com/users/benjchristensen/orgs",
            "repos_url": "https://api.github.com/users/benjchristensen/repos",
            "events_url": "https://api.github.com/users/benjchristensen/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benjchristensen/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2013-01-21T22:19:44Z",
        "updated_at": "2013-01-21T22:19:44Z",
        "author_association": "MEMBER",
        "body": "On existing code the composition of 50 'map' calls takes ~370ms whereas a single call with a list of the same 50 functions takes ~23ms.\n\n```\nrunCompositionTest\nSum: 710082754 Time: 371.601ms\nrunNonCompositionalTestWithDirectLoop\nSum: 710082754 Time: 23.814ms\nrunNonCompositionalTestWithArrayOfFunctions\nSum: 710082754 Time: 23.925ms\n-------------------------------\nrunCompositionTest\nSum: 710082754 Time: 383.391ms\nrunNonCompositionalTestWithDirectLoop\nSum: 710082754 Time: 24.577ms\nrunNonCompositionalTestWithArrayOfFunctions\nSum: 710082754 Time: 24.65ms\n-------------------------------\nrunCompositionTest\nSum: 710082754 Time: 376.443ms\nrunNonCompositionalTestWithDirectLoop\nSum: 710082754 Time: 24.587ms\nrunNonCompositionalTestWithArrayOfFunctions\nSum: 710082754 Time: 26.131ms\n```\n",
        "reactions": {
            "url": "https://api.github.com/repos/ReactiveX/RxJava/issues/comments/12520622/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/ReactiveX/RxJava/issues/comments/12520674",
        "html_url": "https://github.com/ReactiveX/RxJava/issues/104#issuecomment-12520674",
        "issue_url": "https://api.github.com/repos/ReactiveX/RxJava/issues/104",
        "id": 12520674,
        "node_id": "MDEyOklzc3VlQ29tbWVudDEyNTIwNjc0",
        "user": {
            "login": "benjchristensen",
            "id": 813492,
            "node_id": "MDQ6VXNlcjgxMzQ5Mg==",
            "avatar_url": "https://avatars.githubusercontent.com/u/813492?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benjchristensen",
            "html_url": "https://github.com/benjchristensen",
            "followers_url": "https://api.github.com/users/benjchristensen/followers",
            "following_url": "https://api.github.com/users/benjchristensen/following{/other_user}",
            "gists_url": "https://api.github.com/users/benjchristensen/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benjchristensen/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benjchristensen/subscriptions",
            "organizations_url": "https://api.github.com/users/benjchristensen/orgs",
            "repos_url": "https://api.github.com/users/benjchristensen/repos",
            "events_url": "https://api.github.com/users/benjchristensen/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benjchristensen/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2013-01-21T22:20:59Z",
        "updated_at": "2013-01-21T22:20:59Z",
        "author_association": "MEMBER",
        "body": "Playing with different things I got the following numbers:\n\n```\n\n>>> Statically typed <<<\n\nWithout chaining:\n\nSum: 710082754 Time: 130.683ms\nrunNonCompositionalTestWithDirectLoop\nSum: 710082754 Time: 21.011ms\nrunNonCompositionalTestWithArrayOfFunctions\nSum: 710082754 Time: 20.84ms\n\n\nWith chaining (composition collapsing):\n\nSum: 710082754 Time: 28.787ms\nrunNonCompositionalTestWithDirectLoop\nSum: 710082754 Time: 19.525ms\nrunNonCompositionalTestWithArrayOfFunctions\nSum: 710082754 Time: 19.175ms\n\n\n>>> Dynamically typed <<<\n\nWhen going via generic Functions.execute even with chained sequence:\n\nrunCompositionTest\nSum: 710082754 Time: 577.3ms <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< very bad when dynamic\nrunNonCompositionalTestWithDirectLoop\nSum: 710082754 Time: 31.591ms\nrunNonCompositionalTestWithArrayOfFunctions\nSum: 710082754 Time: 38.093ms\nrunCompositionTest\n\n\nWith Function memoization so we only pay dynamic price during sequence setup, not in onNext:\n\n\nUsing ArrayList\n\nrunCompositionTest\nSum: 710082754 Time: 27.078ms\nrunNonCompositionalTestWithDirectLoop\nSum: 710082754 Time: 18.911ms\nrunNonCompositionalTestWithArrayOfFunctions\nSum: 710082754 Time: 18.852ms\n\n\nUsing LinkedBlockingQueue\n\nrunCompositionTest\nSum: 710082754 Time: 46.532ms\nrunNonCompositionalTestWithDirectLoop\nSum: 710082754 Time: 18.946ms\nrunNonCompositionalTestWithArrayOfFunctions\nSum: 710082754 Time: 18.746ms\n\n```\n",
        "reactions": {
            "url": "https://api.github.com/repos/ReactiveX/RxJava/issues/comments/12520674/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/ReactiveX/RxJava/issues/comments/12520772",
        "html_url": "https://github.com/ReactiveX/RxJava/issues/104#issuecomment-12520772",
        "issue_url": "https://api.github.com/repos/ReactiveX/RxJava/issues/104",
        "id": 12520772,
        "node_id": "MDEyOklzc3VlQ29tbWVudDEyNTIwNzcy",
        "user": {
            "login": "benjchristensen",
            "id": 813492,
            "node_id": "MDQ6VXNlcjgxMzQ5Mg==",
            "avatar_url": "https://avatars.githubusercontent.com/u/813492?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benjchristensen",
            "html_url": "https://github.com/benjchristensen",
            "followers_url": "https://api.github.com/users/benjchristensen/followers",
            "following_url": "https://api.github.com/users/benjchristensen/following{/other_user}",
            "gists_url": "https://api.github.com/users/benjchristensen/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benjchristensen/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benjchristensen/subscriptions",
            "organizations_url": "https://api.github.com/users/benjchristensen/orgs",
            "repos_url": "https://api.github.com/users/benjchristensen/repos",
            "events_url": "https://api.github.com/users/benjchristensen/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benjchristensen/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2013-01-21T22:23:06Z",
        "updated_at": "2013-01-21T22:23:06Z",
        "author_association": "MEMBER",
        "body": "By adding chaining (to collapse composition into a single observable with chain of functions) and improving the handling of dynamic function calls through memoization I get this:\n\n```\nrunCompositionTest\nSum: 710082754 Time: 47.184ms\nrunNonCompositionalTestWithDirectLoop\nSum: 710082754 Time: 17.869ms\nrunNonCompositionalTestWithArrayOfFunctions\nSum: 710082754 Time: 26.528ms\n-------------------------------\nrunCompositionTest\nSum: 710082754 Time: 47.578ms\nrunNonCompositionalTestWithDirectLoop\nSum: 710082754 Time: 21.692ms\nrunNonCompositionalTestWithArrayOfFunctions\nSum: 710082754 Time: 18.177ms\n-------------------------------\nrunCompositionTest\nSum: 710082754 Time: 47.93ms\nrunNonCompositionalTestWithDirectLoop\nSum: 710082754 Time: 18.821ms\nrunNonCompositionalTestWithArrayOfFunctions\nSum: 710082754 Time: 20.064ms\n```\n\nI can get the composed version down to around 25-28ms if I use ArrayList but I need to be thread-safe in this case so am using ConcurrentLinkedQueue which adds a little time, but it's still far faster than before.\n\nSame code now takes ~48ms instead of ~370ms.\n",
        "reactions": {
            "url": "https://api.github.com/repos/ReactiveX/RxJava/issues/comments/12520772/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/ReactiveX/RxJava/issues/comments/12520850",
        "html_url": "https://github.com/ReactiveX/RxJava/pull/105#issuecomment-12520850",
        "issue_url": "https://api.github.com/repos/ReactiveX/RxJava/issues/105",
        "id": 12520850,
        "node_id": "MDEyOklzc3VlQ29tbWVudDEyNTIwODUw",
        "user": {
            "login": "benjchristensen",
            "id": 813492,
            "node_id": "MDQ6VXNlcjgxMzQ5Mg==",
            "avatar_url": "https://avatars.githubusercontent.com/u/813492?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benjchristensen",
            "html_url": "https://github.com/benjchristensen",
            "followers_url": "https://api.github.com/users/benjchristensen/followers",
            "following_url": "https://api.github.com/users/benjchristensen/following{/other_user}",
            "gists_url": "https://api.github.com/users/benjchristensen/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benjchristensen/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benjchristensen/subscriptions",
            "organizations_url": "https://api.github.com/users/benjchristensen/orgs",
            "repos_url": "https://api.github.com/users/benjchristensen/repos",
            "events_url": "https://api.github.com/users/benjchristensen/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benjchristensen/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2013-01-21T22:25:13Z",
        "updated_at": "2013-01-21T22:25:13Z",
        "author_association": "MEMBER",
        "body": "This pull request is for https://github.com/Netflix/RxJava/issues/104.\n\nI have NOT tried this on production code yet, but all unit tests are working.\n\nI'd like to get code reviews and feedback on the approach before I merge.\n",
        "reactions": {
            "url": "https://api.github.com/repos/ReactiveX/RxJava/issues/comments/12520850/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/ReactiveX/RxJava/issues/comments/12520934",
        "html_url": "https://github.com/ReactiveX/RxJava/pull/105#issuecomment-12520934",
        "issue_url": "https://api.github.com/repos/ReactiveX/RxJava/issues/105",
        "id": 12520934,
        "node_id": "MDEyOklzc3VlQ29tbWVudDEyNTIwOTM0",
        "user": {
            "login": "benjchristensen",
            "id": 813492,
            "node_id": "MDQ6VXNlcjgxMzQ5Mg==",
            "avatar_url": "https://avatars.githubusercontent.com/u/813492?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benjchristensen",
            "html_url": "https://github.com/benjchristensen",
            "followers_url": "https://api.github.com/users/benjchristensen/followers",
            "following_url": "https://api.github.com/users/benjchristensen/following{/other_user}",
            "gists_url": "https://api.github.com/users/benjchristensen/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benjchristensen/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benjchristensen/subscriptions",
            "organizations_url": "https://api.github.com/users/benjchristensen/orgs",
            "repos_url": "https://api.github.com/users/benjchristensen/repos",
            "events_url": "https://api.github.com/users/benjchristensen/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benjchristensen/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2013-01-21T22:26:53Z",
        "updated_at": "2013-01-21T23:28:25Z",
        "author_association": "MEMBER",
        "body": "NOTE: This is only taking effect on map calls right now. I want to prove it there and then apply to other functions.\n\nIt is more or less hacked in on this branch to allow discussion before I do the fairly substantial refactor to apply this pattern elsewhere.\n\nThere are also more complicated use cases still to deal with.\n",
        "reactions": {
            "url": "https://api.github.com/repos/ReactiveX/RxJava/issues/comments/12520934/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/ReactiveX/RxJava/issues/comments/12528505",
        "html_url": "https://github.com/ReactiveX/RxJava/pull/105#issuecomment-12528505",
        "issue_url": "https://api.github.com/repos/ReactiveX/RxJava/issues/105",
        "id": 12528505,
        "node_id": "MDEyOklzc3VlQ29tbWVudDEyNTI4NTA1",
        "user": {
            "login": "benjchristensen",
            "id": 813492,
            "node_id": "MDQ6VXNlcjgxMzQ5Mg==",
            "avatar_url": "https://avatars.githubusercontent.com/u/813492?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benjchristensen",
            "html_url": "https://github.com/benjchristensen",
            "followers_url": "https://api.github.com/users/benjchristensen/followers",
            "following_url": "https://api.github.com/users/benjchristensen/following{/other_user}",
            "gists_url": "https://api.github.com/users/benjchristensen/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benjchristensen/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benjchristensen/subscriptions",
            "organizations_url": "https://api.github.com/users/benjchristensen/orgs",
            "repos_url": "https://api.github.com/users/benjchristensen/repos",
            "events_url": "https://api.github.com/users/benjchristensen/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benjchristensen/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2013-01-22T02:58:58Z",
        "updated_at": "2013-01-22T02:58:58Z",
        "author_association": "MEMBER",
        "body": "I removed the prototype of chaining. This is currently at a clean point that could merge over the dynamic function invocation optimizations.\n\nI am playing more with chaining.\n",
        "reactions": {
            "url": "https://api.github.com/repos/ReactiveX/RxJava/issues/comments/12528505/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/ReactiveX/RxJava/issues/comments/12528694",
        "html_url": "https://github.com/ReactiveX/RxJava/pull/105#issuecomment-12528694",
        "issue_url": "https://api.github.com/repos/ReactiveX/RxJava/issues/105",
        "id": 12528694,
        "node_id": "MDEyOklzc3VlQ29tbWVudDEyNTI4Njk0",
        "user": {
            "login": "benjchristensen",
            "id": 813492,
            "node_id": "MDQ6VXNlcjgxMzQ5Mg==",
            "avatar_url": "https://avatars.githubusercontent.com/u/813492?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benjchristensen",
            "html_url": "https://github.com/benjchristensen",
            "followers_url": "https://api.github.com/users/benjchristensen/followers",
            "following_url": "https://api.github.com/users/benjchristensen/following{/other_user}",
            "gists_url": "https://api.github.com/users/benjchristensen/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benjchristensen/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benjchristensen/subscriptions",
            "organizations_url": "https://api.github.com/users/benjchristensen/orgs",
            "repos_url": "https://api.github.com/users/benjchristensen/repos",
            "events_url": "https://api.github.com/users/benjchristensen/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benjchristensen/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2013-01-22T03:07:30Z",
        "updated_at": "2013-01-22T03:07:30Z",
        "author_association": "MEMBER",
        "body": "Cleaned up in new pull request with single commit with just function execution optimizations.\n\nhttps://github.com/Netflix/RxJava/pull/106\n\nWill not merge this pull request.\n",
        "reactions": {
            "url": "https://api.github.com/repos/ReactiveX/RxJava/issues/comments/12528694/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/ReactiveX/RxJava/issues/comments/12528798",
        "html_url": "https://github.com/ReactiveX/RxJava/pull/106#issuecomment-12528798",
        "issue_url": "https://api.github.com/repos/ReactiveX/RxJava/issues/106",
        "id": 12528798,
        "node_id": "MDEyOklzc3VlQ29tbWVudDEyNTI4Nzk4",
        "user": {
            "login": "benjchristensen",
            "id": 813492,
            "node_id": "MDQ6VXNlcjgxMzQ5Mg==",
            "avatar_url": "https://avatars.githubusercontent.com/u/813492?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benjchristensen",
            "html_url": "https://github.com/benjchristensen",
            "followers_url": "https://api.github.com/users/benjchristensen/followers",
            "following_url": "https://api.github.com/users/benjchristensen/following{/other_user}",
            "gists_url": "https://api.github.com/users/benjchristensen/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benjchristensen/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benjchristensen/subscriptions",
            "organizations_url": "https://api.github.com/users/benjchristensen/orgs",
            "repos_url": "https://api.github.com/users/benjchristensen/repos",
            "events_url": "https://api.github.com/users/benjchristensen/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benjchristensen/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2013-01-22T03:12:14Z",
        "updated_at": "2013-01-22T03:12:14Z",
        "author_association": "MEMBER",
        "body": "Test case:\n\n``` java\n    public void runCompositionTest(Integer[] values) {\n        System.out.println(\"runCompositionTest\");\n\n        final AtomicInteger onNextSum = new AtomicInteger(0);\n        final long start = System.nanoTime();\n\n        MathFunction m = new MathFunction();\n        // 50 levels of composition (same function so that's not the cost)\n        Observable.from(values)\n                .map(m).map(m).map(m).map(m).map(m).map(m).map(m).map(m).map(m).map(m)\n                .map(m).map(m).map(m).map(m).map(m).map(m).map(m).map(m).map(m).map(m)\n                .map(m).map(m).map(m).map(m).map(m).map(m).map(m).map(m).map(m).map(m)\n                .map(m).map(m).map(m).map(m).map(m).map(m).map(m).map(m).map(m).map(m)\n                .map(m).map(m).map(m).map(m).map(m).map(m).map(m).map(m).map(m).map(m)\n                .subscribe(new TestObserver(onNextSum, start));\n    }\n```\n\nBefore this commit:\n\nSum: 710082754 Time: **437.936ms**\n\nAfter this commit:\n\nSum: 710082754 Time: **60.605ms**\n",
        "reactions": {
            "url": "https://api.github.com/repos/ReactiveX/RxJava/issues/comments/12528798/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/ReactiveX/RxJava/issues/comments/12528840",
        "html_url": "https://github.com/ReactiveX/RxJava/issues/104#issuecomment-12528840",
        "issue_url": "https://api.github.com/repos/ReactiveX/RxJava/issues/104",
        "id": 12528840,
        "node_id": "MDEyOklzc3VlQ29tbWVudDEyNTI4ODQw",
        "user": {
            "login": "benjchristensen",
            "id": 813492,
            "node_id": "MDQ6VXNlcjgxMzQ5Mg==",
            "avatar_url": "https://avatars.githubusercontent.com/u/813492?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benjchristensen",
            "html_url": "https://github.com/benjchristensen",
            "followers_url": "https://api.github.com/users/benjchristensen/followers",
            "following_url": "https://api.github.com/users/benjchristensen/following{/other_user}",
            "gists_url": "https://api.github.com/users/benjchristensen/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benjchristensen/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benjchristensen/subscriptions",
            "organizations_url": "https://api.github.com/users/benjchristensen/orgs",
            "repos_url": "https://api.github.com/users/benjchristensen/repos",
            "events_url": "https://api.github.com/users/benjchristensen/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benjchristensen/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2013-01-22T03:14:50Z",
        "updated_at": "2013-01-22T03:14:50Z",
        "author_association": "MEMBER",
        "body": "Pretty significant performance improvements came from improved handling of function execution - in particular memoizing the logic for constructing a function, particularly dynamic ones.\n\nThe long if/then conditional block for handling the many different Func/Action/language functions was very expensive in sequence with lots of data.\n\nThis was fixed in https://github.com/Netflix/RxJava/pull/106\n\nI'm still testing the potential gains from chaining.\n",
        "reactions": {
            "url": "https://api.github.com/repos/ReactiveX/RxJava/issues/comments/12528840/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/ReactiveX/RxJava/issues/comments/12557347",
        "html_url": "https://github.com/ReactiveX/RxJava/issues/104#issuecomment-12557347",
        "issue_url": "https://api.github.com/repos/ReactiveX/RxJava/issues/104",
        "id": 12557347,
        "node_id": "MDEyOklzc3VlQ29tbWVudDEyNTU3MzQ3",
        "user": {
            "login": "benjchristensen",
            "id": 813492,
            "node_id": "MDQ6VXNlcjgxMzQ5Mg==",
            "avatar_url": "https://avatars.githubusercontent.com/u/813492?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benjchristensen",
            "html_url": "https://github.com/benjchristensen",
            "followers_url": "https://api.github.com/users/benjchristensen/followers",
            "following_url": "https://api.github.com/users/benjchristensen/following{/other_user}",
            "gists_url": "https://api.github.com/users/benjchristensen/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benjchristensen/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benjchristensen/subscriptions",
            "organizations_url": "https://api.github.com/users/benjchristensen/orgs",
            "repos_url": "https://api.github.com/users/benjchristensen/repos",
            "events_url": "https://api.github.com/users/benjchristensen/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benjchristensen/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2013-01-22T18:03:17Z",
        "updated_at": "2013-01-22T18:03:17Z",
        "author_association": "MEMBER",
        "body": "While playing with chaining I found that the actual performance issues were the dynamic function construction/lookup and concurrency/synchronization costs - not the depth of stack.\n\nHere is code that demonstrates that the stack depth is not a problem for performance. In fact, the composed version performs better than the loops:\n\n``` java\n\npackage testing;\n\nimport java.util.ArrayList;\nimport java.util.concurrent.Callable;\n\nimport rx.util.Func1;\n\npublic class TestChainPerformance {\n\n    public static void main(String[] args) {\n        TestChainPerformance test = new TestChainPerformance();\n        Integer[] values = new Integer[100001];\n        for (int i = 0; i < values.length; i++) {\n            values[i] = i;\n        }\n\n        try {\n            for (int i = 0; i < 100; i++) {\n                System.out.println(\"-------------------------------\");\n                test.runChained(values);\n                test.runComposed(values);\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n\n    }\n\n    public void runComposed(final Integer[] values) throws Exception {\n        long start = System.nanoTime();\n\n        Callable<Integer> c = null;\n        for (int i = 0; i < 250; i++) {\n            final Callable<Integer> previousC = c;\n            c = new Callable<Integer>() {\n\n                @Override\n                public Integer call() throws Exception {\n                    MathFunction f = new MathFunction();\n                    int sum = 0;\n                    for (int v : values) {\n                        sum += f.call(v);\n                    }\n                    if (previousC != null) {\n                        sum += previousC.call();\n                    }\n                    return sum;\n                }\n\n            };\n        }\n\n        int sum = c.call();\n\n        long end = System.nanoTime();\n        System.out.println(\"Composed => Sum: \" + sum + \" Time: \" + ((double) (end - start)) / 1000 / 1000 + \"ms\");\n    }\n\n    public void runChained(Integer[] values) {\n        long start = System.nanoTime();\n        int sum = 0;\n\n        ArrayList<Func1<Integer, Integer>> functions = new ArrayList<Func1<Integer, Integer>>();\n        for (int i = 0; i < 250; i++) {\n            functions.add(new MathFunction());\n        }\n\n        for (int v : values) {\n            for (Func1<Integer, Integer> f : functions) {\n                sum += f.call(v);\n            }\n        }\n\n        long end = System.nanoTime();\n        System.out.println(\"Iterative => Sum: \" + sum + \" Time: \" + ((double) (end - start)) / 1000 / 1000 + \"ms\");\n    }\n\n    private static class MathFunction implements Func1<Integer, Integer> {\n\n        @Override\n        public Integer call(Integer t1) {\n            return t1 + 1;\n        }\n\n    }\n}\n```\n\nThe performance numbers on my machine are\n\n```\nIterative => Sum: 202017114 Time: 227.288ms\nComposed => Sum: 202017114 Time: **172.856ms**\n-------------------------------\nIterative => Sum: 202017114 Time: 230.235ms\nComposed => Sum: 202017114 Time: **173.917ms**\n-------------------------------\nIterative => Sum: 202017114 Time: 226.337ms\nComposed => Sum: 202017114 Time: **172.932ms**\n```\n\nThat is with JDK 7. JDK 6 is slower but similar difference between the two.\n\nDue to this I'm abandoning pursuit of chaining as a performance enhancement and focusing on functions and synchronization.\n",
        "reactions": {
            "url": "https://api.github.com/repos/ReactiveX/RxJava/issues/comments/12557347/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/ReactiveX/RxJava/issues/comments/12573718",
        "html_url": "https://github.com/ReactiveX/RxJava/issues/104#issuecomment-12573718",
        "issue_url": "https://api.github.com/repos/ReactiveX/RxJava/issues/104",
        "id": 12573718,
        "node_id": "MDEyOklzc3VlQ29tbWVudDEyNTczNzE4",
        "user": {
            "login": "benjchristensen",
            "id": 813492,
            "node_id": "MDQ6VXNlcjgxMzQ5Mg==",
            "avatar_url": "https://avatars.githubusercontent.com/u/813492?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benjchristensen",
            "html_url": "https://github.com/benjchristensen",
            "followers_url": "https://api.github.com/users/benjchristensen/followers",
            "following_url": "https://api.github.com/users/benjchristensen/following{/other_user}",
            "gists_url": "https://api.github.com/users/benjchristensen/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benjchristensen/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benjchristensen/subscriptions",
            "organizations_url": "https://api.github.com/users/benjchristensen/orgs",
            "repos_url": "https://api.github.com/users/benjchristensen/repos",
            "events_url": "https://api.github.com/users/benjchristensen/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benjchristensen/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2013-01-22T23:45:48Z",
        "updated_at": "2013-01-22T23:45:48Z",
        "author_association": "MEMBER",
        "body": "In pull request https://github.com/Netflix/RxJava/pull/106 with function memoization we went from this:\n\n```\nSum: 710082754 Time: 437.936ms\n```\n\nto this:\n\n```\nSum: 710082754 Time: 60.605ms\n```\n\nBy reducing the nested synchronization (eliminating most of it) it is now running at:\n\n```\nSum: 710082754 Time: 22.429ms\n```\n",
        "reactions": {
            "url": "https://api.github.com/repos/ReactiveX/RxJava/issues/comments/12573718/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/ReactiveX/RxJava/issues/comments/12573865",
        "html_url": "https://github.com/ReactiveX/RxJava/issues/104#issuecomment-12573865",
        "issue_url": "https://api.github.com/repos/ReactiveX/RxJava/issues/104",
        "id": 12573865,
        "node_id": "MDEyOklzc3VlQ29tbWVudDEyNTczODY1",
        "user": {
            "login": "benjchristensen",
            "id": 813492,
            "node_id": "MDQ6VXNlcjgxMzQ5Mg==",
            "avatar_url": "https://avatars.githubusercontent.com/u/813492?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benjchristensen",
            "html_url": "https://github.com/benjchristensen",
            "followers_url": "https://api.github.com/users/benjchristensen/followers",
            "following_url": "https://api.github.com/users/benjchristensen/following{/other_user}",
            "gists_url": "https://api.github.com/users/benjchristensen/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benjchristensen/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benjchristensen/subscriptions",
            "organizations_url": "https://api.github.com/users/benjchristensen/orgs",
            "repos_url": "https://api.github.com/users/benjchristensen/repos",
            "events_url": "https://api.github.com/users/benjchristensen/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benjchristensen/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2013-01-22T23:50:20Z",
        "updated_at": "2013-01-22T23:51:16Z",
        "author_association": "MEMBER",
        "body": "Performance is now very close to what it is without Rx:\n\n```\nSum: 710082754 Time: 22.429ms\n```\n\nvs\n\n```\nrunNonCompositionalTestWithDirectLoop\nSum: 710082754 Time: 17.248ms\nrunNonCompositionalTestWithArrayOfFunctions\nSum: 710082754 Time: 17.311ms\n```\n\nI am considering this overhead acceptable right now and not spending further time on this issue.\n",
        "reactions": {
            "url": "https://api.github.com/repos/ReactiveX/RxJava/issues/comments/12573865/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/ReactiveX/RxJava/issues/comments/12619638",
        "html_url": "https://github.com/ReactiveX/RxJava/issues/19#issuecomment-12619638",
        "issue_url": "https://api.github.com/repos/ReactiveX/RxJava/issues/19",
        "id": 12619638,
        "node_id": "MDEyOklzc3VlQ29tbWVudDEyNjE5NjM4",
        "user": {
            "login": "abersnaze",
            "id": 406038,
            "node_id": "MDQ6VXNlcjQwNjAzOA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/406038?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/abersnaze",
            "html_url": "https://github.com/abersnaze",
            "followers_url": "https://api.github.com/users/abersnaze/followers",
            "following_url": "https://api.github.com/users/abersnaze/following{/other_user}",
            "gists_url": "https://api.github.com/users/abersnaze/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/abersnaze/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/abersnaze/subscriptions",
            "organizations_url": "https://api.github.com/users/abersnaze/orgs",
            "repos_url": "https://api.github.com/users/abersnaze/repos",
            "events_url": "https://api.github.com/users/abersnaze/events{/privacy}",
            "received_events_url": "https://api.github.com/users/abersnaze/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2013-01-23T20:09:36Z",
        "updated_at": "2013-01-23T20:09:36Z",
        "author_association": "CONTRIBUTOR",
        "body": "Interesting quote from that page\n\"If you do not use the overload which takes a scheduler as an argument, Rx will pick a default scheduler by using the principle of least concurrency.  This means that the scheduler which introduces the least amount of concurrency that satisfies the needs of the operator is chosen.  For example, for operators returning an observable with a finite and small number of messages, Rx calls Immediate.  For operators returning a potentially large or infinite number of messages, CurrentThread is called. For operators which use timers, ThreadPool is used.\"\n",
        "reactions": {
            "url": "https://api.github.com/repos/ReactiveX/RxJava/issues/comments/12619638/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/ReactiveX/RxJava/issues/comments/12619906",
        "html_url": "https://github.com/ReactiveX/RxJava/issues/19#issuecomment-12619906",
        "issue_url": "https://api.github.com/repos/ReactiveX/RxJava/issues/19",
        "id": 12619906,
        "node_id": "MDEyOklzc3VlQ29tbWVudDEyNjE5OTA2",
        "user": {
            "login": "benjchristensen",
            "id": 813492,
            "node_id": "MDQ6VXNlcjgxMzQ5Mg==",
            "avatar_url": "https://avatars.githubusercontent.com/u/813492?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benjchristensen",
            "html_url": "https://github.com/benjchristensen",
            "followers_url": "https://api.github.com/users/benjchristensen/followers",
            "following_url": "https://api.github.com/users/benjchristensen/following{/other_user}",
            "gists_url": "https://api.github.com/users/benjchristensen/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benjchristensen/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benjchristensen/subscriptions",
            "organizations_url": "https://api.github.com/users/benjchristensen/orgs",
            "repos_url": "https://api.github.com/users/benjchristensen/repos",
            "events_url": "https://api.github.com/users/benjchristensen/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benjchristensen/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2013-01-23T20:16:02Z",
        "updated_at": "2013-01-23T20:16:02Z",
        "author_association": "MEMBER",
        "body": "How would an operator know how many messages it is going to have? Only the origin Observable could know that - a given operator along the chain won't know so how does this get accomplished?\n",
        "reactions": {
            "url": "https://api.github.com/repos/ReactiveX/RxJava/issues/comments/12619906/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/ReactiveX/RxJava/issues/comments/12622241",
        "html_url": "https://github.com/ReactiveX/RxJava/issues/19#issuecomment-12622241",
        "issue_url": "https://api.github.com/repos/ReactiveX/RxJava/issues/19",
        "id": 12622241,
        "node_id": "MDEyOklzc3VlQ29tbWVudDEyNjIyMjQx",
        "user": {
            "login": "benjchristensen",
            "id": 813492,
            "node_id": "MDQ6VXNlcjgxMzQ5Mg==",
            "avatar_url": "https://avatars.githubusercontent.com/u/813492?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benjchristensen",
            "html_url": "https://github.com/benjchristensen",
            "followers_url": "https://api.github.com/users/benjchristensen/followers",
            "following_url": "https://api.github.com/users/benjchristensen/following{/other_user}",
            "gists_url": "https://api.github.com/users/benjchristensen/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benjchristensen/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benjchristensen/subscriptions",
            "organizations_url": "https://api.github.com/users/benjchristensen/orgs",
            "repos_url": "https://api.github.com/users/benjchristensen/repos",
            "events_url": "https://api.github.com/users/benjchristensen/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benjchristensen/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2013-01-23T21:05:23Z",
        "updated_at": "2013-01-23T21:05:23Z",
        "author_association": "MEMBER",
        "body": "I guess this would mean that things like \"toObservable(1, 2, 3, 4)\" are a known thing and can be done immediately without a thread, but merging 4 unknown sequences can't be known.\n\nObviously when Timers are used a Thread of some kind is needed (java.util.Timer or another implementation like this: https://github.com/Netflix/Hystrix/blob/master/hystrix-core/src/main/java/com/netflix/hystrix/util/HystrixTimer.java).\n\nFor the majority of cases though where the \"cost\" of the observable sequence is unknown I don't know that I like automatically spawning them off on threads. It has worked well for the Netflix API to leave that choice to the origin of the observable (to be synchronous or asynchronous, one thread or many, etc).\n\nThe introduction of Schedulers makes perfect sense when an app is dealing with data structures, their own synchronous IO operations or CPU bound computations, but it becomes awkward when consuming from a 3rd party API exposing Observables who can and will make their own choice about being synchronous or asynchronous.\n\nIn fact, that's been a huge part of the draw to Rx is that the API doesn't need to change when the backend implementations moves between synchronous and asynchronous for whatever reason it may choose to do so.\n\nIf the Observable is already asynchronous it would be inefficient to spin up another thread that in turn blocks on an async call.\n\nOther than documentation on the API calls that return Observables is there a better way to handle that scenario?\n\nI can imagine a scenario where some apps (such as the Netflix API) may want to disable any use of Schedulers so the origin retains control since Rx has allowed us to decouple the writing of business logic from the decisions of concurrency.\n\nBefore flaming me ... I DO like schedulers, it's very powerful and we will definitely get them added, I just have some questions about balancing that power (and inevitable inefficiencies of making poor scheduler choices) with the elegant simplicity of Rx Observables without them where concurrency is not a thought - everything is just asynchronous.\n\nI'm interested in all of your perspectives so please chime in.\n",
        "reactions": {
            "url": "https://api.github.com/repos/ReactiveX/RxJava/issues/comments/12622241/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/ReactiveX/RxJava/issues/comments/12622314",
        "html_url": "https://github.com/ReactiveX/RxJava/issues/7#issuecomment-12622314",
        "issue_url": "https://api.github.com/repos/ReactiveX/RxJava/issues/7",
        "id": 12622314,
        "node_id": "MDEyOklzc3VlQ29tbWVudDEyNjIyMzE0",
        "user": {
            "login": "benjchristensen",
            "id": 813492,
            "node_id": "MDQ6VXNlcjgxMzQ5Mg==",
            "avatar_url": "https://avatars.githubusercontent.com/u/813492?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benjchristensen",
            "html_url": "https://github.com/benjchristensen",
            "followers_url": "https://api.github.com/users/benjchristensen/followers",
            "following_url": "https://api.github.com/users/benjchristensen/following{/other_user}",
            "gists_url": "https://api.github.com/users/benjchristensen/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benjchristensen/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benjchristensen/subscriptions",
            "organizations_url": "https://api.github.com/users/benjchristensen/orgs",
            "repos_url": "https://api.github.com/users/benjchristensen/repos",
            "events_url": "https://api.github.com/users/benjchristensen/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benjchristensen/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2013-01-23T21:07:01Z",
        "updated_at": "2013-01-23T21:07:01Z",
        "author_association": "MEMBER",
        "body": "We have decided to not make it final.\n\nBut we also have changed it from being abstract to a normal concrete class.\n\nThe 'subscribe' implementation is passed in via a protected constructor or using Observable.create(Func1)\n",
        "reactions": {
            "url": "https://api.github.com/repos/ReactiveX/RxJava/issues/comments/12622314/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/ReactiveX/RxJava/issues/comments/12622622",
        "html_url": "https://github.com/ReactiveX/RxJava/pull/109#issuecomment-12622622",
        "issue_url": "https://api.github.com/repos/ReactiveX/RxJava/issues/109",
        "id": 12622622,
        "node_id": "MDEyOklzc3VlQ29tbWVudDEyNjIyNjIy",
        "user": {
            "login": "benjchristensen",
            "id": 813492,
            "node_id": "MDQ6VXNlcjgxMzQ5Mg==",
            "avatar_url": "https://avatars.githubusercontent.com/u/813492?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benjchristensen",
            "html_url": "https://github.com/benjchristensen",
            "followers_url": "https://api.github.com/users/benjchristensen/followers",
            "following_url": "https://api.github.com/users/benjchristensen/following{/other_user}",
            "gists_url": "https://api.github.com/users/benjchristensen/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benjchristensen/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benjchristensen/subscriptions",
            "organizations_url": "https://api.github.com/users/benjchristensen/orgs",
            "repos_url": "https://api.github.com/users/benjchristensen/repos",
            "events_url": "https://api.github.com/users/benjchristensen/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benjchristensen/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2013-01-23T21:12:40Z",
        "updated_at": "2013-01-23T21:12:40Z",
        "author_association": "MEMBER",
        "body": "This code looks fine, though I'm curious about the implication of it blocking on the Future.get().\n\nIt's obviously the only way to do it without spawning another thread that blocks on that future which would take us into this conversation: https://github.com/Netflix/RxJava/issues/19\n\nIs this misleading to people to think it would be asynchronous?\n",
        "reactions": {
            "url": "https://api.github.com/repos/ReactiveX/RxJava/issues/comments/12622622/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/ReactiveX/RxJava/issues/comments/12622750",
        "html_url": "https://github.com/ReactiveX/RxJava/pull/109#issuecomment-12622750",
        "issue_url": "https://api.github.com/repos/ReactiveX/RxJava/issues/109",
        "id": 12622750,
        "node_id": "MDEyOklzc3VlQ29tbWVudDEyNjIyNzUw",
        "user": {
            "login": "benjchristensen",
            "id": 813492,
            "node_id": "MDQ6VXNlcjgxMzQ5Mg==",
            "avatar_url": "https://avatars.githubusercontent.com/u/813492?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benjchristensen",
            "html_url": "https://github.com/benjchristensen",
            "followers_url": "https://api.github.com/users/benjchristensen/followers",
            "following_url": "https://api.github.com/users/benjchristensen/following{/other_user}",
            "gists_url": "https://api.github.com/users/benjchristensen/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benjchristensen/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benjchristensen/subscriptions",
            "organizations_url": "https://api.github.com/users/benjchristensen/orgs",
            "repos_url": "https://api.github.com/users/benjchristensen/repos",
            "events_url": "https://api.github.com/users/benjchristensen/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benjchristensen/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2013-01-23T21:15:03Z",
        "updated_at": "2013-01-23T21:15:03Z",
        "author_association": "MEMBER",
        "body": "I've added comments inline in the code as well\n",
        "reactions": {
            "url": "https://api.github.com/repos/ReactiveX/RxJava/issues/comments/12622750/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/ReactiveX/RxJava/issues/comments/12623084",
        "html_url": "https://github.com/ReactiveX/RxJava/issues/19#issuecomment-12623084",
        "issue_url": "https://api.github.com/repos/ReactiveX/RxJava/issues/19",
        "id": 12623084,
        "node_id": "MDEyOklzc3VlQ29tbWVudDEyNjIzMDg0",
        "user": {
            "login": "abersnaze",
            "id": 406038,
            "node_id": "MDQ6VXNlcjQwNjAzOA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/406038?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/abersnaze",
            "html_url": "https://github.com/abersnaze",
            "followers_url": "https://api.github.com/users/abersnaze/followers",
            "following_url": "https://api.github.com/users/abersnaze/following{/other_user}",
            "gists_url": "https://api.github.com/users/abersnaze/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/abersnaze/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/abersnaze/subscriptions",
            "organizations_url": "https://api.github.com/users/abersnaze/orgs",
            "repos_url": "https://api.github.com/users/abersnaze/repos",
            "events_url": "https://api.github.com/users/abersnaze/events{/privacy}",
            "received_events_url": "https://api.github.com/users/abersnaze/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2013-01-23T21:21:31Z",
        "updated_at": "2013-01-23T21:21:31Z",
        "author_association": "CONTRIBUTOR",
        "body": "The docs say \"least amount of concurrency\" which I interpreted to mean that if the amount of work is unknown that it would it default to immediate.  We could still manipulate the defaults and probably ignore Schedulers passed in through a strategy.\n",
        "reactions": {
            "url": "https://api.github.com/repos/ReactiveX/RxJava/issues/comments/12623084/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/ReactiveX/RxJava/issues/comments/12623167",
        "html_url": "https://github.com/ReactiveX/RxJava/issues/19#issuecomment-12623167",
        "issue_url": "https://api.github.com/repos/ReactiveX/RxJava/issues/19",
        "id": 12623167,
        "node_id": "MDEyOklzc3VlQ29tbWVudDEyNjIzMTY3",
        "user": {
            "login": "benjchristensen",
            "id": 813492,
            "node_id": "MDQ6VXNlcjgxMzQ5Mg==",
            "avatar_url": "https://avatars.githubusercontent.com/u/813492?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benjchristensen",
            "html_url": "https://github.com/benjchristensen",
            "followers_url": "https://api.github.com/users/benjchristensen/followers",
            "following_url": "https://api.github.com/users/benjchristensen/following{/other_user}",
            "gists_url": "https://api.github.com/users/benjchristensen/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benjchristensen/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benjchristensen/subscriptions",
            "organizations_url": "https://api.github.com/users/benjchristensen/orgs",
            "repos_url": "https://api.github.com/users/benjchristensen/repos",
            "events_url": "https://api.github.com/users/benjchristensen/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benjchristensen/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2013-01-23T21:23:24Z",
        "updated_at": "2013-01-23T21:23:24Z",
        "author_association": "MEMBER",
        "body": "Yes, I think a strategy pattern will be needed to accomplish the Netflix API use case.\n",
        "reactions": {
            "url": "https://api.github.com/repos/ReactiveX/RxJava/issues/comments/12623167/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/ReactiveX/RxJava/issues/comments/12956337",
        "html_url": "https://github.com/ReactiveX/RxJava/pull/109#issuecomment-12956337",
        "issue_url": "https://api.github.com/repos/ReactiveX/RxJava/issues/109",
        "id": 12956337,
        "node_id": "MDEyOklzc3VlQ29tbWVudDEyOTU2MzM3",
        "user": {
            "login": "benjchristensen",
            "id": 813492,
            "node_id": "MDQ6VXNlcjgxMzQ5Mg==",
            "avatar_url": "https://avatars.githubusercontent.com/u/813492?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/benjchristensen",
            "html_url": "https://github.com/benjchristensen",
            "followers_url": "https://api.github.com/users/benjchristensen/followers",
            "following_url": "https://api.github.com/users/benjchristensen/following{/other_user}",
            "gists_url": "https://api.github.com/users/benjchristensen/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/benjchristensen/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/benjchristensen/subscriptions",
            "organizations_url": "https://api.github.com/users/benjchristensen/orgs",
            "repos_url": "https://api.github.com/users/benjchristensen/repos",
            "events_url": "https://api.github.com/users/benjchristensen/events{/privacy}",
            "received_events_url": "https://api.github.com/users/benjchristensen/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2013-01-31T18:08:33Z",
        "updated_at": "2013-01-31T18:08:33Z",
        "author_association": "MEMBER",
        "body": "Looks good.\n",
        "reactions": {
            "url": "https://api.github.com/repos/ReactiveX/RxJava/issues/comments/12956337/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]